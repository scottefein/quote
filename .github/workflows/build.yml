# This is a basic workflow to help you get started with Actions

name: CICD

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches:
    - master
    - staging
    - develop
  pull_request:
    branches:
    - master
    - staging
    - develop

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  HUMANITEC_ORG: ${{ secrets.HUMANITEC_ORG }}
  HUMANITEC_TOKEN: ${{ secrets.HUMANITEC_SECRET }}
  HUMANITEC_APP: ${{ secrets.HUMANITEC_APP }}
  HUMANITEC_URL: "https://api.humanitec.io"

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # The "build" workflow
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v3
    # prep work
    - run: |
        ls
        pwd
        echo $HOME
        mkdir $HOME/.bin
        echo $PATH
        echo $GITHUB_PATH
        echo "${HOME}/.bin" >> $GITHUB_PATH
        echo $PATH
        echo $GITHUB_PATH
    - run: |
        curl -L https://github.com/a8m/envsubst/releases/download/v1.4.2/envsubst-Linux-x86_64 -o ~/.bin/envsubst
        curl -L https://github.com/score-spec/score-humanitec/releases/download/0.3.0-rc1/score-humanitec_0.3.0-rc1_linux_amd64.tar.gz -o /tmp/score.tar.gz
        tar xvzf /tmp/score.tar.gz -C /tmp && cp /tmp/score-humanitec ~/.bin
        curl -L https://releases.hashicorp.com/terraform/1.4.0/terraform_1.4.0_linux_amd64.zip -o /tmp/terraform.zip
        unzip /tmp/terraform.zip && mv terraform ~/.bin
        chmod +x ~/.bin
        terraform --version
        jq --version
        score-humanitec --version
        
    # Setup Go
    - name: Setup Go
      uses: actions/setup-go@v2
      with:
        go-version: '1.18.1' # The Go version to download (if necessary) and use.
    
    # Install all the dependencies
    - name: Install dependencies
      run: |
        go version
        go get -u golang.org/x/lint/golint
        
    # Run build of the application
    - name: Run build
      run: go build . 
      
    # # Run vet & lint on the code
    # - name: Run vet & lint
    #   run: |
    #     go vet .
    #     golint .
    
    # # Run testing on the code
    # - name: Run testing
    #   run: cd test && go test -v

    - name: Log in to the Container registry
      uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

    - name: Build and push Docker image
      uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }} 
        
    # dev env
    - run: |
        cd score
        chmod +x deploy_dev.sh
        IMAGE_NAME='${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}' envsubst < overrides.quote.yaml > overrides.yaml
        HUMANITEC_ENVIRONMENT=development ./deploy_dev.sh